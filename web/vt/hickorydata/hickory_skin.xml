<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.18">

<!-- ************ -->
<!-- Double click -->
<!-- ************ -->
  <plugin name="doubleclick" url="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" alturl="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.js" keep="true" ondblclick="ondoubleclick();"/>
  <action name="ondoubleclick">switchFullscreen();


  </action>

<!-- ************ -->
<!-- Context Menu -->
<!-- ************ -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
  <action name="updateContextMenu">
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, view.hlookatmax, view.hlookatmin);
      if (viewhfov == 360,
        sub(viewvfov, view.vlookatmax, view.vlookatmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    ,
      set(contextmenu.item[littleplanet].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>


<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->
<plugin name="gyroscope"
        url="graphics/gyro.js"
        keep="true"
        devices="no-desktop.and.html5"


        friction="0.5"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    ifnot (plugin[gyroscope].available === undefined, 
      if (plugin[gyroscope].available,
        if(scene[get(xml.scene)].planar,
          if(plugin[gyroscope].enabled,
            switch(plugin[gyroscope].enabled);
            if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
          );
        ,
          if(plugin[gyroscope].activated,
            ifnot(plugin[gyroscope].enabled,
              switch(plugin[gyroscope].enabled);
              if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
            );
          );
        );
      );
    );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    ifnot (plugin[gyroscope].available === undefined,
      if (plugin[gyroscope].available,
        if(%1,
          set(plugin[gyroscope].activated,true);
        );
        if (%1 !=  plugin[gyroscope].enabled,
          if(plugin[gyroscope].activated,
            switch(plugin[gyroscope].enabled);
          ,
            set(plugin[gyroscope].enabled, false);
          );
          if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
        );
      );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    ifnot (plugin[gyroscope].available === undefined, 
      if (plugin[gyroscope].available,
        ifnot(scene[get(xml.scene)].planar,
          switch(plugin[gyroscope].enabled);
          set(plugin[gyroscope].activated,true);
        );
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        set(tour_gyroscopedevices, false);
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  );
</action>

	<!-- ***************************** -->
	<!-- Docked Thumbnails Control Bar -->
	<!-- ***************************** -->



<krpano themeunanimebarbuilt="false" themeunanimeIsOpened="false" />

<events name="themeunanimebarevents" 
	onxmlcomplete="themeunanimebuildMenuBar();"
	
	keep="true"/>

<action name="themeunanimebuildMenuBar">
	ifnot (themeunanimebarbuilt, themeunanimebuildMenu(); set(themeunanimebarbuilt, true););
</action>



<action name="themeunanimebuildMenu">
	
    set(themeunanimebutton_pos, 0);
    set(layer[themeunanimebtn_hidecontrols].x, get(themeunanimebutton_pos));
    set(layer[themeunanimebtn_hidecontrols_bg].x, get(themeunanimebutton_pos));
    inc(themeunanimebutton_pos, 36);


      if (device.desktop,
        set(layer[themeunanimebtn_display_help].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_display_help_bg].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_close_help].x  , get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_close_help_bg].x  , get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
      );

      if (device.fullscreensupport,
        set(layer[themeunanimebtn_openfs].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_closefs].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_openfs_bg ].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_closefs_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
      );



      set(layer[themeunanimebtn_autorotate_on].x , get(themeunanimebutton_pos));
      set(layer[themeunanimebtn_autorotate_on_bg].x , get(themeunanimebutton_pos));
      set(layer[themeunanimebtn_autorotate_off].x, get(themeunanimebutton_pos));
      set(layer[themeunanimebtn_autorotate_off_bg].x, get(themeunanimebutton_pos));
      inc(themeunanimebutton_pos, 36);



      if (device.desktop,
        set(layer[themeunanimebtn_ctrlmode_drag_to].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_ctrlmode_drag_to_bg].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_ctrlmode_move_to].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_ctrlmode_move_to_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
      );


      if(plugin[gyroscope],
        set(themeunanimeDisplayGyroscopeButton, false);
        if (device.tablet, set(themeunanimeDisplayGyroscopeButton, true););
        if (device.mobile, set(themeunanimeDisplayGyroscopeButton, true););
        if(themeunanimeDisplayGyroscopeButton,
          set(layer[themeunanimebtn_gyroscope_on].x, get(themeunanimebutton_pos));
          set(layer[themeunanimebtn_gyroscope_on_bg ].x, get(themeunanimebutton_pos));
          set(layer[themeunanimebtn_gyroscope_off].x, get(themeunanimebutton_pos));
          set(layer[themeunanimebtn_gyroscope_off_bg].x, get(themeunanimebutton_pos));
          inc(themeunanimebutton_pos, 36);
        );
      );


      if (device.desktop,
        set(layer[themeunanimebtn_right].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_right_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);

        set(layer[themeunanimebtn_left].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_left_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
      );

      if (device.desktop,
        set(layer[themeunanimebtn_down].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_down_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);

        set(layer[themeunanimebtn_up].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_up_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
      );

      if (device.desktop,
        set(layer[themeunanimebtn_out].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_out_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
        set(layer[themeunanimebtn_in].x, get(themeunanimebutton_pos));
        set(layer[themeunanimebtn_in_bg].x, get(themeunanimebutton_pos));
        inc(themeunanimebutton_pos, 36);
      );


	
	
	
</action>

<events name="themeunanimeStartTourEvents" onTourStart="themeunanimeCallOnStartTour();" keep="true" />

<action name="themeunanimeCallOnStartTour">
	
	themeunanimeshowMenuControls();
</action>


    <layer name="themeunanime_bg"
           keep="true"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/footer.png"
           zorder="3"
           width="100%"
           align="bottomleft"
           x="0"
           visible="false" />

    <style name="themeunanime_btn_style_bg"
            keep="true"
            parent="themeunanime_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />

    <style name="themeunanime_btn_style_on_bg"
           keep="true"
           parent="themeunanime_bg"
           crop="0|48|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />

    <style name="themeunanime_btn_down_style"
           keep="true"
           parent="themeunanime_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',themeunanimemenuTooltipStyle);"
           onover="themeunanimectrl_btn_onoveraction"
           onout="themeunanimectrl_btn_onoutaction"
           />

    <style name="themeunanime_btn_style"
           keep="true"
           parent="themeunanime_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',themeunanimemenuTooltipStyle);"
           onover="themeunanimectrl_btn_onoveraction"
           ondown="themeunanimectrl_btn_ondownaction"
           onout="themeunanimectrl_btn_onoutaction"
           />

  <action name="themeunanimectrl_btn_onoveraction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|48|48|48");
  </action>

  <action name="themeunanimectrl_btn_ondownaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|96|48|48");
  </action>

  <action name="themeunanimectrl_btn_onoutaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|0|48|48");
    hideTooltip();
  </action>

    <style name="themeunanime_btn_style_on"
            keep="true"
            parent="themeunanime_bg"
                  crop="0|48|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',themeunanimemenuTooltipStyle);" 
            onout="hideTooltip();"
            />


  <events name="themeunanimegyroscopeavailableevent"
          ongyroscopeavailable="themeunanimeupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="themeunanimeenableGyroscopeButtons(true);"
          ongyroscopeoff="themeunanimeenableGyroscopeButtons(false);"
          keep="true"/>
  <krpano themeunanimemenugyroscopeavailable="false" themeunanimemenugyroscopeenabled="false"/>
  <action name="themeunanimeupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(themeunanimemenugyroscopeavailable, true);
      themeunanimeupdateGyroscopeButtons();
    );
  </action>
  <action name="themeunanimeenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(themeunanimemenugyroscopeenabled, %1);
      themeunanimeupdateGyroscopeButtons();
    );
  </action>
	<action name="themeunanimeHideGyroscopeButtons">
		set(layer[themeunanimebtn_gyroscope_off].visible, false);
		set(layer[themeunanimebtn_gyroscope_on].visible, false);
		set(layer[themeunanimebtn_gyroscope_off_bg].visible, false);
		set(layer[themeunanimebtn_gyroscope_on_bg].visible, false);
	</action>
	<action name="themeunanimeShowGyroscopeButtons">
		if (themeunanimemenugyroscopeavailable,
			if (themeunanimemenugyroscopeenabled,
				set(layer[themeunanimebtn_gyroscope_off].visible, true);
				set(layer[themeunanimebtn_gyroscope_on].visible, false);
				set(layer[themeunanimebtn_gyroscope_off_bg].visible, true);
				set(layer[themeunanimebtn_gyroscope_on_bg].visible, false);
			,
				set(layer[themeunanimebtn_gyroscope_off].visible, false);
				set(layer[themeunanimebtn_gyroscope_on].visible, true);
				set(layer[themeunanimebtn_gyroscope_off_bg].visible, false);
				set(layer[themeunanimebtn_gyroscope_on_bg].visible, true);
			);
		,
			themeunanimeHideGyroscopeButtons();
		);
	</action>
	<action name="themeunanimeupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		set(themeunanimeDisplayMenuGyroscopeButtons, false);
		if (themeunanimeIsOpened, set(themeunanimeDisplayMenuGyroscopeButtons, true););
		if (themeunanimeDisplayMenuGyroscopeButtons,
			themeunanimeShowGyroscopeButtons();
		,
			themeunanimeHideGyroscopeButtons();
		);
	,
		themeunanimeHideGyroscopeButtons();
	);
	</action>
	
    <layer name="themeunanimebtn_gyroscope_off_bg" style="themeunanime_btn_style_bg" visible="false" devices="html5" />
    <layer name="themeunanimebtn_gyroscope_off"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_gyroscope.png"
            style="themeunanime_btn_style"
            onclick="disableGyroscope();
"
            devices="html5"
            tooltip="controlBar_dockedThumbnailsgyroOffTip"
            visible="false"
            />
    <layer name="themeunanimebtn_gyroscope_on_bg" style="themeunanime_btn_style_on_bg" visible="false" devices="html5" />
    <layer name="themeunanimebtn_gyroscope_on"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_gyroscope.png"
            style="themeunanime_btn_style_on"
            onclick="enableGyroscope();
"
            devices="html5"
            tooltip="controlBar_dockedThumbnailsgyroOnTip"
            visible="false"
            />


	<events name="themeunanimecontrolmodechangedevent" oncontrolmodechanged="themeunanimeupdateControlModeButtons();" keep="true"/>
	<action name="themeunanimeHideControlModeButtons">
		set(layer[themeunanimebtn_ctrlmode_move_to].visible, false);
		set(layer[themeunanimebtn_ctrlmode_drag_to].visible, false);
		set(layer[themeunanimebtn_ctrlmode_move_to_bg].visible, false);
		set(layer[themeunanimebtn_ctrlmode_drag_to_bg].visible, false);
	</action>
	<action name="themeunanimeShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[themeunanimebtn_ctrlmode_drag_to].visible, true);
			set(layer[themeunanimebtn_ctrlmode_move_to].visible, false);
			set(layer[themeunanimebtn_ctrlmode_drag_to_bg].visible, true);
			set(layer[themeunanimebtn_ctrlmode_move_to_bg].visible, false);
		,
			set(layer[themeunanimebtn_ctrlmode_move_to].visible, true);
			set(layer[themeunanimebtn_ctrlmode_drag_to].visible, false);
			set(layer[themeunanimebtn_ctrlmode_move_to_bg].visible, true);
			set(layer[themeunanimebtn_ctrlmode_drag_to_bg].visible, false);
		);
	</action>
	<action name="themeunanimeupdateControlModeButtons">
	if (device.desktop,
		set(themeunanimeDisplayControlModeButtons, false);
		if (themeunanimeIsOpened, set(themeunanimeDisplayControlModeButtons, true););
		if (themeunanimeDisplayControlModeButtons,
			themeunanimeShowControlModeButtons();
		,
			themeunanimeHideControlModeButtons();
		);
	,
		themeunanimeHideControlModeButtons();
	);
	</action>
	
    <layer name="themeunanimebtn_ctrlmode_move_to_bg" style="themeunanime_btn_style_bg" visible="false" devices="desktop" />
    <layer name="themeunanimebtn_ctrlmode_move_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_to.png"
           style="themeunanime_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeMoveTip"
           onclick="setControlModeMoveTo();
"
           visible="false"
           devices="desktop"
           />
    <layer name="themeunanimebtn_ctrlmode_drag_to_bg" style="themeunanime_btn_style_bg" visible="false" devices="desktop" />
    <layer name="themeunanimebtn_ctrlmode_drag_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_drag_to.png"
           style="themeunanime_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeDragTip"
           onclick="setControlModeDragTo();
"
           visible="false"
           devices="desktop"
           />

    <layer name="themeunanimebtn_in_bg" style="themeunanime_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="themeunanimebtn_in"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_in.png"
           style="themeunanime_btn_down_style"
           ondown="themeunanimectrl_btn_ondownaction();set(fov_moveforce, -1);
"
           onup="set(fov_moveforce, 0);
"
           tooltip="controlBar_dockedThumbnailszoomInTip"
           devices="desktop"
           visible="false"
           />
    <layer name="themeunanimebtn_out_bg" style="themeunanime_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="themeunanimebtn_out"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_out.png"
           style="themeunanime_btn_down_style"
           ondown="themeunanimectrl_btn_ondownaction();set(fov_moveforce, +1);
"
           onup="set(fov_moveforce, 0);
"
           tooltip="controlBar_dockedThumbnailszoomOutTip"
           devices="desktop"
           visible="false"
           />

    <layer name="themeunanimebtn_left_bg" style="themeunanime_btn_style_bg" devices="desktop" visible="false" />
    <layer name="themeunanimebtn_left"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_left.png"
           style="themeunanime_btn_down_style"
           ondown="themeunanimectrl_btn_ondownaction();set(hlookat_moveforce, -1);
"
           onup="set(hlookat_moveforce, 0);
"
            tooltip="controlBar_dockedThumbnailsmoveLeftTip"
           devices="desktop"
           visible="false"
           />
    <layer name="themeunanimebtn_right_bg" style="themeunanime_btn_style_bg" devices="desktop" visible="false" />
    <layer name="themeunanimebtn_right"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_right.png"
           style="themeunanime_btn_down_style"
           ondown="themeunanimectrl_btn_ondownaction();set(hlookat_moveforce, +1);
"
           onup="set(hlookat_moveforce, 0);
"
            tooltip="controlBar_dockedThumbnailsmoveRightTip"
           devices="desktop"
           visible="false"
           />

    <layer name="themeunanimebtn_up_bg" style="themeunanime_btn_style_bg" devices="desktop" visible="false" />
    <layer name="themeunanimebtn_up"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_up.png"
           style="themeunanime_btn_down_style"
           ondown="themeunanimectrl_btn_ondownaction();set(vlookat_moveforce, -1);
"
           onup="set(vlookat_moveforce, 0);
"
            tooltip="controlBar_dockedThumbnailsmoveUpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="themeunanimebtn_down_bg" style="themeunanime_btn_style_bg" devices="desktop" visible="false" />
    <layer name="themeunanimebtn_down"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_down.png"
           style="themeunanime_btn_down_style"
           ondown="themeunanimectrl_btn_ondownaction();set(vlookat_moveforce, +1);
"
           onup="set(vlookat_moveforce, 0);
"
            tooltip="controlBar_dockedThumbnailsmoveDownTip"
           devices="desktop"
           visible="false"
           />





    <layer name="themeunanimebtn_openfs_bg" style="themeunanime_btn_style_bg" visible="false" devices="fullscreensupport" />
    <layer name="themeunanimebtn_openfs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_enter_fs.png"
           onclick="enterFullscreen();
"
           style="themeunanime_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailsopenFsTip"
           devices="fullscreensupport"
           />
    <layer name="themeunanimebtn_closefs_bg" style="themeunanime_btn_style_on_bg" visible="false" devices="fullscreensupport" />
    <layer name="themeunanimebtn_closefs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_close_fs.png"
           onclick="exitFullscreen();
"
           style="themeunanime_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailscloseFsTip"
           devices="fullscreensupport"
           />

    <layer name="themeunanimebtn_autorotate_on_bg" style="themeunanime_btn_style_bg" visible="false" />
    <layer name="themeunanimebtn_autorotate_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_autorotation.png"
           onclick="resumeautorotation();
"
           style="themeunanime_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautorotateOnTip"
           />
    <layer name="themeunanimebtn_autorotate_off_bg" style="themeunanime_btn_style_on_bg" visible="false" />
    <layer name="themeunanimebtn_autorotate_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_autorotation.png"
           onclick="pauseautorotation();
"
           style="themeunanime_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautorotateOffTip"
           />



    <layer name="themeunanimebtn_display_help_bg" style="themeunanime_btn_style_bg" visible="false" devices="desktop" />
    <layer name="themeunanimebtn_display_help"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_help.png"
           onclick="themeunanimedisplayHelp();"
           style="themeunanime_btn_style"
           tooltip="controlBar_dockedThumbnailsdisplayHelpTip"
           devices="desktop"
           visible="false"
           />
    <layer name="themeunanimebtn_close_help_bg" style="themeunanime_btn_style_on_bg" visible="false" devices="desktop"/>
    <layer name="themeunanimebtn_close_help"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_help.png"
           onclick="themeunanimecloseHelp();"
           style="themeunanime_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailshideHelpTip"
           devices="desktop"
           />



    <layer name="themeunanimebtn_hidecontrols_bg" style="themeunanime_btn_style_bg" visible="false" />
    <layer name="themeunanimebtn_hidecontrols"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_controls.png"
           style="themeunanime_btn_style"
           onclick="themeunanimehideMenuControls();hideTourControls();
"
           visible="false"
            tooltip="controlBar_dockedThumbnailshideControlsTip"
           />

    <layer name="themeunanimebtn_showcontrols"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls_bg.png"
            align="bottomright"
            zorder="3"
            height="36"
            width="36"
            visible="false"
            y="12"
            x="0" >
    <layer name="themeunanimebtn_showcontrols_fg"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            onclick="themeunanimeshowMenuControls();showTourControls();
"
            onhover="showTooltip('plugin',themeunanimemenuTooltipStyle);"
            onout="hideTooltip();"
            tooltip="controlBar_dockedThumbnailsdisplayControlsTip"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls.png"
            align="center"
            height="36"
            width="36"
            />
    </layer>


<action name="themeunanimehideMenuControls">
	set(themeunanimeIsOpened, false);
	set(layer[themeunanime_bg].visible, false);
	set(layer[themeunanimebtn_showcontrols].visible, true);
	set(layer[themeunanimebtn_hidecontrols_bg].visible, false);
	set(layer[themeunanimebtn_hidecontrols].visible, false);
	set(layer[themeunanimebtn_in_bg].visible, false);
	set(layer[themeunanimebtn_out_bg].visible, false);
	set(layer[themeunanimebtn_in].visible, false);
	set(layer[themeunanimebtn_out].visible, false);
	set(layer[themeunanimebtn_right_bg].visible, false);
	set(layer[themeunanimebtn_left_bg].visible, false);
	set(layer[themeunanimebtn_right].visible, false);
	set(layer[themeunanimebtn_left].visible, false);
	set(layer[themeunanimebtn_down_bg].visible, false);
	set(layer[themeunanimebtn_up_bg].visible, false);
	set(layer[themeunanimebtn_down].visible, false);
	set(layer[themeunanimebtn_up].visible, false);



		themeunanimeupdateGyroscopeButtons();

		themeunanimeupdateControlModeButtons();




		themeunanimeupdateFullscreenButtons();
		themeunanimeupdateAutorotationButtons();


		themeunanimeupdateHelpButtons();


</action>
<action name="themeunanimeshowMenuControls">
	set(themeunanimeIsOpened, true);
      themeunanimeupdateFullscreenButtons();


      themeunanimeupdateAutorotationButtons();

      themeunanimeupdateGyroscopeButtons();

      themeunanimeupdateControlModeButtons();




      themeunanimeupdateHelpButtons();
      set(layer[themeunanime_bg].visible, true);
	set(layer[themeunanimebtn_showcontrols].visible, false);
	set(layer[themeunanimebtn_hidecontrols_bg].visible, true);
	set(layer[themeunanimebtn_hidecontrols].visible, true);
	set(layer[themeunanimebtn_in_bg].visible, true);
	set(layer[themeunanimebtn_out_bg].visible, true);
	set(layer[themeunanimebtn_in].visible, true);
	set(layer[themeunanimebtn_out].visible, true);
	set(layer[themeunanimebtn_right_bg].visible, true);
	set(layer[themeunanimebtn_left_bg].visible, true);
	set(layer[themeunanimebtn_right].visible, true);
	set(layer[themeunanimebtn_left].visible, true);
	set(layer[themeunanimebtn_down_bg].visible, true);
	set(layer[themeunanimebtn_up_bg].visible, true);
	set(layer[themeunanimebtn_down].visible, true);
	set(layer[themeunanimebtn_up].visible, true);


	
	
</action>


    <layer name="themeunanimehelpScreenBg" align="center" keep="true" onclick="themeunanimecloseHelp();"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/help_screen_bg.png"
           visible="false"
           zorder="97"
           >
      <layer name="themeunanimehelpScreen" align="center" keep="true" onclick="themeunanimecloseHelp();" 
             url="%FIRSTXML%/graphics/dockedthumbscontrolbar/help_screen_fg.png"
             height="100%" 
             width="prop" 
             displayed="false"
             />
    </layer>
    <action name="themeunanimedisplayHelp">
      if (device.desktop,
        set(layer[themeunanimehelpScreen].displayed, true);
        set(layer[themeunanimehelpScreenBg].visible,true);
        themeunanimeupdateHelpButtons();
      );
    </action>
    <action name="themeunanimecloseHelp">
      if (device.desktop,
        set(layer[themeunanimehelpScreen].displayed, false);
        set(layer[themeunanimehelpScreenBg].visible,false);
        themeunanimeupdateHelpButtons();
      );
    </action>
	<action name="themeunanimeHideHelpButtons">
		set(layer[themeunanimebtn_display_help].visible, false);
		set(layer[themeunanimebtn_close_help].visible, false);
		set(layer[themeunanimebtn_display_help_bg].visible, false);
		set(layer[themeunanimebtn_close_help_bg].visible, false);
	</action>
	<action name="themeunanimeShowHelpButtons">
		if (layer[themeunanimehelpScreen].displayed,
			set(layer[themeunanimebtn_close_help].visible, true);
			set(layer[themeunanimebtn_display_help].visible, false);
			set(layer[themeunanimebtn_close_help_bg].visible, true);
			set(layer[themeunanimebtn_display_help_bg].visible, false);
		,
			set(layer[themeunanimebtn_display_help].visible, true);
			set(layer[themeunanimebtn_close_help].visible, false);
			set(layer[themeunanimebtn_display_help_bg].visible, true);
			set(layer[themeunanimebtn_close_help_bg].visible, false);
		);
	</action>
	<action name="themeunanimeupdateHelpButtons">
	if (device.desktop,
		set(themeunanimeDisplayHelpButtons, false);
		if (themeunanimeIsOpened, set(themeunanimeDisplayHelpButtons, true););
		if (themeunanimeDisplayHelpButtons,
			themeunanimeShowHelpButtons();
		,
			themeunanimeHideHelpButtons();
		);
	,
		themeunanimeHideHelpButtons();
	);
	</action>
    


	<events name="themeunanimemenufullscreenchangeevent"
		onenterfullscreen="themeunanimeupdateFullscreenButtons();"
		onexitfullscreen="themeunanimeupdateFullscreenButtons();"
		keep="true"/>
	<action name="themeunanimeHideFullscreenButtons">
		set(layer[themeunanimebtn_openfs].visible , false);
		set(layer[themeunanimebtn_closefs].visible, false);
		set(layer[themeunanimebtn_openfs_bg].visible, false);
		set(layer[themeunanimebtn_closefs_bg].visible, false);
	</action>
	<action name="themeunanimeShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[themeunanimebtn_openfs].visible , false);
				set(layer[themeunanimebtn_closefs].visible, true);
				set(layer[themeunanimebtn_openfs_bg].visible, false);
				set(layer[themeunanimebtn_closefs_bg].visible, true);
			,
				set(layer[themeunanimebtn_openfs].visible ,true);
				set(layer[themeunanimebtn_closefs].visible,false);
				set(layer[themeunanimebtn_openfs_bg].visible, true);
				set(layer[themeunanimebtn_closefs_bg].visible, false);
			);
		,
			themeunanimeHideFullscreenButtons();
		);
	</action>
	<action name="themeunanimeupdateFullscreenButtons">
		set(themeunanimeDisplayFullscreenButtons, false);
		if (themeunanimeIsOpened, set(themeunanimeDisplayFullscreenButtons, true););
		if (themeunanimeDisplayFullscreenButtons,
			themeunanimeShowFullscreenButtons();
		,
			themeunanimeHideFullscreenButtons();
		);
	</action>

	<events name="themeunanimeAutorotationEvents"
		onstartautorotation="themeunanimeupdateAutorotationButtons();"
		onresumeautorotation="themeunanimeupdateAutorotationButtons();"
		onstopautorotation="themeunanimeupdateAutorotationButtons();"
		onpauseautorotation="themeunanimeupdateAutorotationButtons();"
		keep="true"/>
	<action name="themeunanimeHideAutorotationButtons">
		set(layer[themeunanimebtn_autorotate_off].visible, false);
		set(layer[themeunanimebtn_autorotate_on].visible , false);
		set(layer[themeunanimebtn_autorotate_off_bg].visible, false);
		set(layer[themeunanimebtn_autorotate_on_bg].visible , false);
	</action>
	<action name="themeunanimeShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[themeunanimebtn_autorotate_off].visible, false);
			set(layer[themeunanimebtn_autorotate_on].visible , true);
			set(layer[themeunanimebtn_autorotate_off_bg].visible, false);
			set(layer[themeunanimebtn_autorotate_on_bg].visible , true);
		,
			set(layer[themeunanimebtn_autorotate_off].visible, true);
			set(layer[themeunanimebtn_autorotate_on].visible , false);
			set(layer[themeunanimebtn_autorotate_off_bg].visible, true);
			set(layer[themeunanimebtn_autorotate_on_bg].visible , false);
		);
	</action>
	<action name="themeunanimeupdateAutorotationButtons">
		set(themeunanimeDisplayAutorotationButtons, false);
		if (themeunanimeIsOpened, set(themeunanimeDisplayAutorotationButtons, true););
		if (themeunanimeDisplayAutorotationButtons,
			themeunanimeShowAutorotationButtons();
		,
			themeunanimeHideAutorotationButtons();
		);
	</action>



	<layer name="themeunanimemenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0x6a6a6a"
	backgroundalpha="0.8"
	border="false"
	css="color:#f29320;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	edge="bottom"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	/>




  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


<action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.pannini, 0.0, distance(1.0, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, view.hlookatmax, view.hlookatmin);
		if (viewhfov == 360,
			sub(viewvfov, view.vlookatmax, view.vlookatmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		stopSetViewTweens();
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini GE 1.0, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		tween(view.pannini, 0.0, distance(1.0, 0.75));
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action>

<action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.pannini, 0.0, distance(1.0, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

</krpano>